---
title: "Department summary: Department for Environment, Food and Rural Affairs (excl. agencies)"
output:
  html_document
---

[comment]: <> (This document makes use of custom open and close tags for use with glue::glue() (" and ", respectively))
[comment]: <> (This document should only be edited as a template: quarto/templates/summary.qmd)

```{r echo=FALSE}

library(magrittr)

data <- CARS::get_tidy_data_file("2024_data.csv")
config <- yaml::read_yaml("../../../config.yml")

data <- CARS::clean_data(data, config)
data <- CARS::derive_vars(data)

data <- data[!is.na(data$department) & data$department == "Department for Environment, Food and Rural Affairs (excl. agencies)", ]

tables <- CARS::summarise_all(data, config, all_tables = FALSE)


```

:::{.callout-note}
Please note, these are the initial summary statistics for CARS 2024 and further analysis will follow. 
We advise linking directly to this document when distributing to ensure the most up to date information.
:::

## How to use this research

Responding to CARS is voluntary. The results presented here are from a self-selecting sample of government analysts. Because respondents are self-selecting, the results we present reflect the views of the analysts who participated. 

For more detail, [see the data collection page](../data_collection.qmd). 

## Coding frequency and tools

### How often analysts are using code at work

We asked all respondents if they had any coding experience, inside or outside of work. Of `r nrow(data)` respondents , `r round(sum(data$coding_exp == "Yes") / nrow(data) * 100, 1)`% reported having coding experience. We asked respondents with coding experience "In your current role, how often do you write code to complete your work objectives?"


```{r}

plot <- CARS::plot_freqs(data = tables$code_freq, 
                   xlab = "How often do you write code in your current role?",
                   font_size = 14)

table <- CARS::df_to_table(data = tables, 
                           config = config, 
                           question = "code_freq")

CARS::wrap_outputs("coding-freq", plot, table)

```

### Access to and knowledge of programming languages

Given a list of programming tools, we asked all respondents if the tool was available to use for their work. 

Access to tools does not necessarily refer to official policy. Some analysts may have access to tools others cannot access within the same organisation.

### Access to coding tools

```{r}

plot <- CARS::plot_stacked(tables$access, xlab = "Programming tool", colour_scale = "3scale", font_size = 14)
table <- CARS::df_to_table(tables$access, column_headers = c("Programming tool", "Yes", "No", "Don't know"), crosstab = TRUE)

CARS::wrap_outputs("access", plot, table)

```

Given the same list of programming tools, all respondents were asked if they knew how to program with the tool to a level suitable for their work, answering "Yes", "No" or "Not required for my work". 

Please note that capability in programming languages is self-reported here and was not objectively defined or tested. The statement "not required for my work" was similarly not defined.

### Knowledge of coding tools

```{r}

plot <- CARS::plot_stacked(tables$knowledge,  xlab = "Programming tool", colour_scale = "3scale", font_size = 14)
table <- CARS::df_to_table(tables$knowledge,  column_headers = c("Programming tool", "Yes", "No", "Not required for my work"), crosstab = TRUE)

CARS::wrap_outputs("knowledge", plot, table)

```

### Access to and knowledge of git


We asked respondents to answer "Yes", "No" or "Don't know" for the following questions:

- Is git available to use in your work?
- Do you know how to use git to version-control your work?

Please note these outputs include people who do not code at work.

### Access to git

```{r}
plot <- CARS::plot_freqs(data = tables$access_git, 
                         xlab = "Is Git available to use for your work?", 
                         font_size = 14) |> 
  CARS::set_axis_range(0, 1, axis = "y")

table <- CARS::df_to_table(data = tables$access_git, 
                           column_headers = c("Is Git available to use for your work?", 
                                              "Percentage"))

CARS::wrap_outputs("git-access", plot, table)

```

### Knowledge of git
```{r}
plot <- CARS::plot_freqs(data = tables$git_knowledge, 
                         font_size = 14, 
                         xlab = "Do you know how to use Git for your work?") |> 
  CARS::set_axis_range(0, 1, axis = "y")

table <- CARS::df_to_table(data = tables$git_knowledge, 
                           column_headers = c("Do you know how to use Git for your work?", 
                                              "Percentage"))

CARS::wrap_outputs("git-knowledge", plot, table)

```

## Coding capability and change

### Where respondents first learned to code

Respondents with coding experience were asked where they first learned to code.

These data only show where people first learned to code. They do not show all the settings in which they learned to code, to what extent, or how long ago.

```{r}

plot <- CARS::plot_freqs(tables$first_learned,
                         xlab = "Where did you first learn to code?", font_size = 14,
                         orientation = "h")
table <- CARS::df_to_table(data = tables,
                           config = config,
                           question = "first_learned")

CARS::wrap_outputs("where-learned", plot, table)

```

### Coding experience

We asked respondents with coding experience how many years of experience they had in a coding role, excluding any years in education.

This data includes any experience in other roles and sectors, but does not define the type of experience.

```{r}

plot <- CARS::plot_freqs(tables$coding_years,
                         xlab = "How many years of experience do you have in a coding role?", 
                         font_size = 14,
                         orientation = "h")
table <- CARS::df_to_table(data = tables,
                           config = config,
                           question = "coding_years")

CARS::wrap_outputs("coding-years", plot, table)

```

### Change in coding ability during current role

We asked "Has your coding ability changed during your current role?"

This question was only asked of respondents with coding experience outside of their current role. This means analysts who first learned to code in their current role are not included in the data.

```{r}

plot <- CARS::plot_freqs(data = tables,
                   config = config,
                   question = "ability_change", 
                   font_size = 14,
                   orientation = "h")

table <- CARS::df_to_table(data = tables,
                           config = config,
                           question = "ability_change")

CARS::wrap_outputs("ability-change", plot, table)

```


## Coding practices

We asked respondents who said they currently use code in their work, how often they carry out various coding practices. For more information on the practices presented below, please read our guidance on [Quality Assurance of Code for Analysis and Research](https://best-practice-and-impact.github.io/qa-of-code-guidance/intro.html)

Open sourcing was defined as 'making code freely available to be modified and redistributed'

### Consistency of good coding practices
```{r}

plot <- CARS::plot_likert(tables$coding_practices,
                          mid = 5, neutral_mid = FALSE,
                          break_q_names_col = "name",
                          max_lines = 2, font_size = 14,
                          height = 800, width = "100%")

table <- CARS::df_to_table(tables$coding_practices,
                           column_headers = c(
                             "Statement",
                             "I don't understand this question (%)",
                             "Never (%)",
                             "Rarely (%)",
                             "Sometimes (%)",
                             "Regularly (%)",
                             "All the time (%)"
                             ),
                           crosstab = TRUE)

CARS::wrap_outputs("good-practices", plot, table)

```

### Documentation

We asked respondents who reported writing code at work how frequently they write different forms of documentation when programming in their current role.

[Embedded documentation](https://best-practice-and-impact.github.io/qa-of-code-guidance/code_documentation.html) is one of the components which make up a RAP minimum viable product. Documentation is important to help others be clear on how to use the product and what the code is intended to do.

```{r}

plot <- CARS::plot_likert(tables$doc,
                          mid = 5, neutral_mid = FALSE,
                          break_q_names_col = "name",
                          max_lines = 2, font_size = 14,
                          height = 800, width = "100%")

table <- CARS::df_to_table(tables$doc,
                           column_headers = c(
                             "Statement",
                             "I don't understand this question (%)",
                             "Never (%)",
                             "Rarely (%)",
                             "Sometimes (%)",
                             "Regularly (%)",
                             "Always (%)"
                             ),
                           crosstab = TRUE)

CARS::wrap_outputs("doc", plot, table)

```

### Working practices

We asked respondents who reported writing code at work how frequently they use good working practices in the coding projects they work on.

```{r}

plot <- CARS::plot_likert(tables$working_practices,
                          mid = 5, neutral_mid = FALSE,
                          break_q_names_col = "name",
                          max_lines = 2, font_size = 14,
                          height = 800, width = "100%")

table <- CARS::df_to_table(tables$working_practices,
                           column_headers = c(
                             "Statement",
                             "I don't understand this question (%)",
                             "Never (%)",
                             "Rarely (%)",
                             "Sometimes (%)",
                             "Regularly (%)",
                             "Always (%)"
                             ),
                           crosstab = TRUE)

CARS::wrap_outputs("working_practices", plot, table)

```

## Reproducible analytical pipelines (RAP)

We asked respondents about their knowledge of and opinions on [reproducible analytical pipelines (RAP)](https://gss.civilservice.gov.uk/reproducible-analytical-pipelines/). RAP refers to the use of practices from software engineering to make analysis more reproducible. These practices build on the advantages of writing analysis as code by ensuring increased quality, trust, efficiency, business continuity and knowledge management. 

The [RAP champions](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/reproducible-analytical-pipeline-rap-champions/) are a network of analysts across government who promote and support RAP development in their departments. Please [contact the analysis standards and pipelines team](mailto:asap@ons.gov.uk) for any enquiries about RAP or the champions network.

The [Analysis Function RAP strategy](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/) was released in June 2022 and sets out plans for adopting RAP across government.

### Knowledge of RAP

We asked all respondents if they had heard anything about reproducible analytical pipelines (RAPs).

```{r}

plot <- CARS::plot_freqs(tables$rap_knowledge,  
                         xlab = "Have you heard of RAP?", 
                         font_size = 14,
                         orientation = "v")
table <- CARS::df_to_table(tables$rap_knowledge, 
                           column_headers = c("Have you heard of RAP?", "Percent"))
 
CARS::wrap_outputs("rap-knowledge", plot, table)

```

### Opinions on RAP

We asked respondents who had heard of RAP whether they agreed with a series of statements.

```{r}

plot <- CARS::plot_likert(tables$rap_opinions,
                          mid = 3, break_q_names_col = "name",
                          max_lines = 2, font_size = 14,
                          height = 700, width = "100%")

table <- CARS::df_to_table(tables$rap_opinions,
                           column_headers = c(
                             "Statement",
                             "Strongly Disagree (%)",
                             "Disagree (%)",
                             "Neutral (%)",
                             "Agree (%)",
                             "Strongly Agree (%)"
                             ),
                           crosstab = TRUE)

CARS::wrap_outputs("rap-opinions", plot, table)

```

## RAP scores

In this section we present RAP components and RAP scores.

For each RAP component a percent positive was calculated. Positive responses were recorded where an answer of "regularly" or "all the time" was given. For documentation, a positive response was recorded if both code comments and README files questions received positive responses. For the continuous integration and dependency management components, responses of "yes" were recorded as positive.

"Basic" components are the components which make up the [RAP MVP](https://github.com/best-practice-and-impact/rap_mvp_maturity_guidance/blob/master/Reproducible-Analytical-Pipelines-MVP.md). "Advanced" components are components which help improve reproducibility, but are not considered part of the minimum standard.

### RAP components

```{r}
tables$rap_components %<>% dplyr::arrange(dplyr::desc(value), dplyr::desc(n)) %>% data.frame

tables$rap_components$name <- as.character(tables$rap_components$name)

tables$rap_components$name <- factor(tables$rap_components$name, levels = tables$rap_components$name)

plot <- CARS::plot_grouped(tables$rap_components,
                           orientation = "h",
                           xlab = "RAP component", font_size = 14)

table <- CARS::df_to_table(tables$rap_components,
                           column_headers = c("RAP component",
                                              "Type",
                                              "Percentage of analysts who code in their work"))

CARS::wrap_outputs("rap-comp", plot, table)

```
