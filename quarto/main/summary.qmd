---
title: "The state of UK public sector analysis code: 2023"
output:
  html:
    self-contained: true
execute:
  echo: false
  warning: false

---

```{r echo=FALSE}

library(magrittr)
data_file <- "2023_data.csv"

data <- CARS::get_tidy_data_file(data_file)
data <- CARS::rename_cols(data)
data <- CARS::apply_skip_logic(data)
data <- CARS::clean_data(data)
data <- CARS::derive_vars(data)

all_wave_data <- CARS::get_all_waves(mode = "file")
tables <- CARS::summarise_all(data, all_tables = TRUE)
samples <- CARS::sample_sizes(data)

```


## How to use this research

Responding to CARS is voluntary. The results presented here are from a self-selecting sample of government analysts. Because respondents are self-selecting, the results we present only reflect the views of the analysts who participated. They cannot be used to infer general conclusions about the wider population of government analysts. 

For more detail, [see the data collection page](data_collection.qmd). 

## Coding frequency and tools

We asked all respondents "In your current role, how often do you write code to complete your work objectives?"

#### 2023 data

```{r}

plot <- CARS::plot_freqs(tables$code_freq, n = samples$all, xlab = "Coding frequency", font_size = 14)
table <- CARS::df_to_table(tables$code_freq, n = samples$all, column_headers = c("In your current role, how often do you write code to complete your work objectives?", "Percent"))

CARS::wrap_outputs("coding-freq", plot, table)

```
```{r}
freq_by_grade <- data %>% 
  dplyr::mutate(CS_grade = dplyr::case_when(
    CS_grade %in% c("Administrative Officer (or equivalent)",
                    "Executive Officer (or equivalent)") ~ "AO/EO",
    CS_grade %in% c("Fast Stream",
                    "Higher Executive Officer (or equivalent)",
                    "Senior Executive Officer (or equivalent)") ~ "FS/HEO/SEO",
    CS_grade %in% c("Grade 6 (or equivalent) ",
                    "Grade 7 (or equivalent)") ~ "G6/7",
    .default = NA)) %>%
  tidyr::drop_na(CS_grade) %>% 
  dplyr::group_by(CS_grade, code_freq) %>%
  dplyr::summarise(n = dplyr::n())

```


Over half of respondents (`r paste0(round(sum(tables$code_freq[c(4,5),2])*100, 0), "%")`) reported coding regularly or all of the time in their current role. 

The relationship between coding frequencies and grade, professional membership and management responsibilities was explored using an ordinal regression model. Only data from respondents in the Civil Service (CS) were included, and CS grades were collapsed into AO/EO, HEO/SEO (including Fast Stream) and G7/G6. 

The results showed that analysts at HEO/SEO grade were more likely to code regularly compared to those in the grades above (G7/G6) or below (AO/EO) when controlling for profession and management responsibilities.

`r paste0(round(sum(freq_by_grade[c(6, 9), 3])/sum(freq_by_grade[c(6:10),3])*100, 0), "%")` of HEO/SEO analysts reported coding 'regularly' or 'all of the time' in their roles, compared to `r paste0(round(sum(freq_by_grade[c(1, 4), 3])/sum(freq_by_grade[c(1:5),3])*100, 0), "%")` of AO/EOs and `r  paste0(round(sum(freq_by_grade[c(11, 14), 3])/sum(freq_by_grade[c(11:15),3])*100, 0), "%")` of G7/G6s. Coding frequency was increased in respondents who managed coders compared to those without management responsibilities, while those managing non-coders were the least likely of all groups to code frequently.

Of the Civil Service professions, data scientists were more likely to code regularly compared to those not in the profession. Those in the economist (GES) and social research (GSR) professions were less likely to use code in their roles than other analysts. This is likely to be related to differences in analytical tools associated with the professions, [see below](#prof-tools) for more information.

#### Coding frequency over time

```{r}

all_wave_data$code_freq <- factor(all_wave_data$code_freq, levels = c(
  "Never", 
  "Rarely",
  "Sometimes",
  "Regularly",
  "All the time"
))

code_freqs_by_year <- table(all_wave_data$year, all_wave_data$code_freq) %>% 
  data.frame %>% 
  dplyr::group_by(Var1) %>% 
  dplyr::mutate(n = sum(Freq), percent = Freq / sum(Freq)) %>% 
  data.frame() %>%
  CARS::get_ci(3, 4)

plot <- CARS::plot_stacked(code_freqs_by_year[c(1,2,5)], orientation = "v", type = "bar", font_size = 14, xlab = "Year") %>%
  plotly::layout(legend = list(traceorder = "reversed")) 

table <- CARS::df_to_table(code_freqs_by_year[c(2,1,5)], crosstab = T, column_headers = c("In your current role, how often do you write code to complete your work objectives?", "2020", "2021", "2022", "2023"))

CARS::wrap_outputs("code-freq", plot, table)

```


### Access to and knowledge of programming languages

Given a list of programming tools, we asked all respondents if the tool was available to use for their work. 

Access to tools does not necessarily refer to official departmental policy. Some analysts may have access to tools that others cannot access within the same organisation.

The most readily available tools were the open source tools, python (`r paste0(round(tables$access[1,3]*100, 0), "%")`), R (`r paste0(round(tables$access[4,3]*100, 0), "%")`) and SQL (`r paste0(round(tables$access[7,3]*100, 0), "%")`), being available to the majority of respondents. By contrast, fewer than half of respondents reported having access to each of the listed proprietary tools, and the majority of respondents did not know either way. 


### Access to coding tools
```{r}

plot <- CARS::plot_stacked(tables$access, n = samples$all, xlab = "Programming tool", colour_scale = "3scale", font_size = 14)
table <- CARS::df_to_table(tables$access, n = samples$all, column_headers = c("Programming tool", "Yes", "No", "Don't know"), crosstab = TRUE)

CARS::wrap_outputs("access", plot, table)

```

Given the same list of programming tools, all respondents were asked if they knew how to program with the tool to a level suitable for their work, answering "Yes", "No" or "Not required for my work". 

The tools with the highest reported capability were R and SQL, with `r paste0(round(tables$knowledge[4,3]*100, 0), "%")` and `r paste0(round(tables$knowledge[7,3]*100, 0), "%")` of respondents respectively reporting that they were able to use them to do their work. Despite it being widely available, only `r paste0(round(tables$knowledge[1,3]*100, 0), "%")` were able to use python by comparison. Capability in each of the proprietary tools did not exceed 20%, suggesting that they are only used in particular roles.

Note that capability in programming languages is self-reported here and was not objectively defined or tested. The statement "not required for my work" was similarly not defined.

### Knowledge of coding tools
```{r}

plot <- CARS::plot_stacked(tables$knowledge, n = samples$all, xlab = "Programming tool", colour_scale = "3scale", font_size = 14)
table <- CARS::df_to_table(tables$knowledge, n = samples$all, column_headers = c("Programming tool", "Yes", "No", "Not required for my work"), crosstab = TRUE)

CARS::wrap_outputs("knowledge", plot, table)

```

### Open source capability  over time
```{r}
freqs <- CARS::summarise_os_vs_prop(all_wave_data)
```


The proportion of respondents who reported having the capability to use R and Python, is shown alongside the proportion able to use SAS, SPSS or Stata, for the past four years of the survey.

Both groups showed a slight drop in 2023, however capability in proprietary tools had the biggest decline, decreasing by `r paste0(round(abs((freqs[7,5]-freqs[8,9]/freqs[7,9])*100),0 ), "%")` from 2022. This is not necessarily representative of a general shift away from proprietary tools as CARS is a self-selecting survey, and so year on year comparisons must be made with caution.

```{r}


table <- CARS::df_to_table(freqs[c(1, 2, 5:7)], 
                           column_headers = c("Programming language type", 
                                              "Year", 
                                              "Know how to programme with these tools (percent)",
                                              "Lower confidence limit (percent)", 
                                              "Upper confidence limit (percent)"), 
                           proportion_col = 3:5)


plot <- CARS::plot_stacked(freqs[c(2,1,5)], type = "line", orientation = "v", font_size = 14,
                           ylab = "Know how to programme with these tools", xlab = "Year",
                           error_y = CARS::set_error_bars(freqs$lower_ci, (freqs$upper_ci))) %>%
  CARS::set_axis_range(0, 1, axis = "y") %>%
    plotly::layout(legend = list(x = 100, y = 0.8))

CARS::wrap_outputs("tools-over-time", plot, table)

```


### Professions capability in different tools {#prof-tools}

Differences in preferred languages may lead to silos between analytical professions. Here we show the percentage of respondents reporting capability in different tools within the different analytical professions.

Note that respondents might be members of more than one profession, and may report capability in more than one tool.

```{R}
colnames(tables$languages_by_prof)[2] <- "Profession"

tables$languages_by_prof[c(2,1,3)] %>% CARS::df_to_table(crosstab = T, proportion_col = 3)
```

A binomial Generalised Linear Mixed Model (GLMM) was used to explore differences in the use of open source tools (R and python) between the different professions, taking into account that individual may be members of multiple professions. 

Those in the data science, operational research (GORS), and statistics (GSG) professions were more likely to be using open source coding tools than those not in these professions. Those in the social research profession (GSR) were less likely to use open source coding tools than other analysts. The remaining professions were found to be not significantly associated with using open source tools, potentially because of increased uncertainty due to the smaller sample sizes from these groups.

### Access to and knowledge of git


We asked respondents to answer "Yes", "No" or "Don't know" for the following questions:

- Is git available to use in your work?
- Do you know how to use git to version-control your work?

These outputs include people who do not code at work.

### Access to git

```{r}
plot <- CARS::plot_freqs(tables$git_access, font_size = 14, n = samples$all, xlab = "Access to git") %>% CARS::set_axis_range(0, 1, axis = "y")

table <- CARS::df_to_table(tables$git_access, n = samples$all, column_headers = c("Response", "Percent"))

CARS::wrap_outputs("git-access", plot, table)

```

### Knowledge of git
```{r}
plot <- CARS::plot_freqs(tables$git_knowledge, font_size = 14, n = samples$all, xlab = "Knowledge of git") %>% CARS::set_axis_range(0, 1, axis = "y")

table <- CARS::df_to_table(tables$git_knowledge, n = samples$all, column_headers = c("Response", "Percent"))

CARS::wrap_outputs("git-knowledge", plot, table)

```

```{r}
git_know_code <- data %>% 
  dplyr::filter(code_freq != "Never") %>%  
  dplyr::group_by(knowledge_git) %>% 
  dplyr::summarise(n = dplyr::n())
```

Git was available to `r paste0(round(tables$git_access[1,2]*100, 0), "%")` of respondents, with only `r paste0(round(tables$git_access[2,2]*100, 0), "%")` reporting having no access to Git. Capability in Git was lower however.  `r paste0(round(tables$git_knowledge[2,2]*100, 0), "%")` of respondents stated that they do not know how to use Git for version control. This decreased to `r paste0(round(git_know_code[2,2]/sum(git_know_code$n)*100, 0), "%")` when excluding non-coders. 

## Coding capability and change

### Where respondents first learned to code

Respondents who had coding experience outside their current role were asked where they first learned to code. Those analysts who code in their current role but reported no other coding experience, are included as having learned 'In current role'. Those who reported first learning to code outside of a work or educational environment were categorised as 'self-taught' based on free-text responses.

These results only show where people first learned to code. They do not show all the settings in which they had learned to code, to what extent, or how long ago.


```{r}

plot <- CARS::plot_freqs(tables$where_learned, n = samples$code_at_work, 
                         xlab = "Where learned", font_size = 14,
                         orientation = "h")
table <- CARS::df_to_table(tables$where_learned,
                           n = samples$code_at_work, 
                           column_headers = c("Where learned", 
                                              "Percent"))

CARS::wrap_outputs("where-learned", plot, table)

```

The majority of respondents learned to code in education, with the next largest group learning in their current public sector role. 

We asked respondents with higher education qualifications to give details of the level, subject and if there was a coding component. Degrees in computer science, mathematics and physical sciences were the most likely to have a coding component, and doctoral degrees were more likely to have a coding component compared to Master's and Bachelor's when accounting for individuals studying at multiple levels.

### Change in coding ability during current role

We asked "Has your coding ability changed during your current role?"

This question was only asked of respondents with coding experience outside of their current role. This means analysts who first learned to code in their current role are not included in the data.

```{r}

plot <- CARS::plot_freqs(tables$ability_change, 
                         n = samples$other_code_experience, 
                         xlab = "Ability change", font_size = 14)

table <- CARS::df_to_table(tables$ability_change,
                           n = samples$other_code_experience,
                           column_headers = c("Ability change", 
                                              "Percent"))

CARS::wrap_outputs("ability-change", plot, table)

```

```{r}
cap_by_grade <- data %>% 
  dplyr::mutate(CS_grade = dplyr::case_when(
    CS_grade %in% c("Administrative Officer (or equivalent)",
                    "Executive Officer (or equivalent)") ~ "AO/EO",
    CS_grade %in% c("Fast Stream",
                    "Higher Executive Officer (or equivalent)",
                    "Senior Executive Officer (or equivalent)") ~ "FS/HEO/SEO",
    CS_grade %in% c("Grade 6 (or equivalent) ",
                    "Grade 7 (or equivalent)") ~ "G6/7",
    .default = NA)) %>%
  tidyr::drop_na(CS_grade, coding_ability_change) %>% 
  dplyr::group_by(CS_grade, coding_ability_change) %>%
  dplyr::summarise(n = dplyr::n())
```

The effect of coding frequency, grade, profession and management responsibilities on changes in coding ability was explored using an ordinal regression model. The model showed a strong positive relationship between coding frequency and increased capability, with those who code 'all the time' being the most likely to show improvements. 

Although a smaller effect, seniority was also a predictor of capability change. Those at G7/G6 were less likely to have improved their coding skills in their role compared to lower grades. `r paste0(round(sum(cap_by_grade[c(11,13), 3])/sum(cap_by_grade[c(10:14),3])*100, 0), "%")` of G7/G6 analysts felt their coding skills had declined while in role, which was higher than both HEO/SEOs (`r  paste0(round(sum(cap_by_grade[c(6,8), 3])/sum(cap_by_grade[c(5:9),3])*100, 0), "%")`) and AO/EOs (`r paste0(round(cap_by_grade[3, 3]/sum(cap_by_grade[c(1:4),3])*100, 0), "%")`). Management responsibilities and membership of a profession were not significantly associated with coding ability change. 

This demonstrates the importance of regular practice in developing and maintaining coding capability, and suggests that analysts at higher grades face barriers to maintaining their technical skills.


## Reproducible analytical pipelines (RAP)

RAP refers to the use of good software engineering practices to make analysis pipelines more reproducible. This approach aims to use automation to improve the quality and efficiency of analytical processes.

The following links contain more resources on RAP:

* You can find minimum RAP standards in the [RAP MVP](rap_mvp_maturity_guidance/Reproducible-Analytical-Pipelines-MVP.md%20at%20master%20·%20best-practice-and-impact/rap_mvp_maturity_guidance%20·%20GitHub)
* You can find guidance on quality assuring code in the [Duck Book](https://best-practice-and-impact.github.io/qa-of-code-guidance/intro.html)

### Awareness of RAP over time

We asked respondents who used coding at work, if they had heard of RAP.



```{r}
freqs <- CARS::summarise_rap_awareness_over_time(all_wave_data)
```
Awareness of RAP appears to be increasing over time. In 2023, `r paste0(round(freqs[4, 5]*100, 0), "%")` of respondents had heard of RAP, the highest proportion to date.

```{r}
plot <- CARS::plot_freqs(freqs[c(2, 5)], type = "line", xlab = "Year", font_size = 14, error_y = CARS::set_error_bars(freqs$lower_ci, freqs$upper_ci)) %>% CARS::set_axis_range(0, 1, axis = "y")

table <- CARS::df_to_table(freqs[c(2,5:7)], 
                           column_headers = c(
                             "Year", 
                             "Heard of RAP (percent)",
                             "Lower confidence limit", 
                             "Upper confidence limit"), 
                           proportion_col = 2:4)

CARS::wrap_outputs("rap-awareness-over-time", plot, table)
```


### RAP Champions

We asked respondents who had heard of RAP, if their department has a RAP champion and if they know who it is.


[RAP champions](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/reproducible-analytical-pipeline-rap-champions/) support and promote the use of RAP across government. Please [contact the analysis standards and pipelines team](mailto:asap@ons.gov.uk) for any enquiries about RAP or the champions network.


```{r}

plot <- CARS::plot_freqs(tables$rap_champ_status, n = samples$heard_of_RAP, break_q_names_col = "value", max_lines = 2, xlab = "Department RAP champions?", font_size = 14, orientation = "h")
table <- CARS::df_to_table(tables$rap_champ_status, n = samples$heard_of_RAP, column_headers = c("Knowledge", "Percent"))

CARS::wrap_outputs("rap-champ-status", plot, table)

```

Over half (`r paste0(round((tables$rap_champ_status[1, 2]+tables$rap_champ_status[2, 2]+tables$rap_champ_status[3, 2])*100, 0), "%")`) of respondents were aware their department had a RAP champion, however `r paste0(round((tables$rap_champ_status[5, 2])*100, 0), "%")`  did not know if their department had a RAP champion, indicating differences in RAP support and promotion between departments. 

### Awareness of RAP strategy

We asked respondents who had heard of RAP, if they had heard of the RAP strategy.

The [Analysis Function RAP strategy](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/) was released in June 2022 and sets out plans for adopting RAP across government.

```{r}
plot <- CARS::plot_freqs(tables$strategy_knowledge, break_q_names_col = 1, max_lines = 3, font_size = 14, orientation = "v", n = samples$heard_of_RAP)

table <- CARS::df_to_table(tables$strategy_knowledge, c("Awareness of the RAP strategy", "Percent"), n = samples$heard_of_RAP)

CARS::wrap_outputs("RAP-strat", plot, table)

```

```{r}
rap_strat <- table(data$strategy_knowledge)
```

Over half (`r paste0(round((tables$strategy_knowledge[1,2]+tables$strategy_knowledge[2,2])*100, 0), "%")`) of respondents were aware of the RAP strategy, but of these `r paste0(round(rap_strat[3]/sum(rap_strat[2], rap_strat[3])*100, 0), "%")` hadn't read it. Further analysis showed that membership of a profession was positively associated with awareness of the RAP strategy, but did not affect whether analysts had read it, while grade had no effect.

### Opinions on RAP

We asked respondents who had heard of RAP whether they agreed with a series of statements.

```{r}

plot <- CARS::plot_likert(tables$rap_opinions, 
                          n = samples$heard_of_RAP, 
                          mid = 3, break_q_names_col = "name", 
                          max_lines = 2, font_size = 14,
                          height = 700, width = "100%")

table <- CARS::df_to_table(tables$rap_opinions, 
                           column_headers = c(
                             "Statement",
                             "Strongly Disagree (%)",
                             "Disagree (%)", 
                             "Neutral (%)", 
                             "Agree (%)",
                             "Strongly Agree (%)"
                             ),
                           n = samples$heard_of_RAP,
                           crosstab = TRUE)

CARS::wrap_outputs("rap-opinions", plot, table)

```

The results showed that `r paste0(round(sum(tables$rap_opinions[29, 3], tables$rap_opinions[30, 3])*100, 0), "%")` of respondents agreed that it is important to implement RAP in their work. However only `r paste0(round(sum(tables$rap_opinions[4, 3], tables$rap_opinions[5, 3])*100, 0), "%")` of respondents said that they were doing so, with `r paste0(round(sum(tables$rap_opinions[24, 3], tables$rap_opinions[25, 3])*100, 0), "%")` planning to implement RAP in the next 12 months. Discrepancies between support for and implementation of RAP by analysts suggests that there are barriers to implementation that still need to be overcome.  

The responses were converted into a composite score after checking for consistency across the statements, and [ANOVA](https://en.wikipedia.org/wiki/Analysis_of_variance) was used to test if there was an effect of grade or profession membership on respondents' opinions of RAP. Respondents who were members of a profession were generally more positive in their opinions of RAP, while grade had no effect. Professions can play an important role in promoting best practice such as RAP within analytical communities. 

## Good coding practices

We asked respondents who reported writing code at work about the good practices they apply when writing code at work. 

These questions cover many of the coding practices recommended in the quality assurance of code for analysis and research guidance, as well as the [minimum RAP standards](https://github.com/best-practice-and-impact/rap_mvp_maturity_guidance/blob/master/Reproducible-Analytical-Pipelines-MVP.md) set by the cross-government [RAP champions network](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/reproducible-analytical-pipeline-rap-champions/).

Coding practices have been classified as either 'Basic' or 'Advanced'. Basic practices are those that make up the minimum RAP standards, while Advanced practices help improve reproducibility. The percentage of respondents who reported applying these practices either 'Regularly' or 'All the time' is shown below.

Open sourcing was defined as 'making code freely available to be modified and redistributed'.

```{r}

tables$rap_components %<>% dplyr::arrange(dplyr::desc(value), dplyr::desc(n)) %>% data.frame

tables$rap_components$name <- as.character(tables$rap_components$name)

tables$rap_components$name <- factor(tables$rap_components$name, levels = tables$rap_components$name)

plot <- CARS::plot_grouped(tables$rap_components, 
                           n = samples$code_at_work,
                           orientation = "h", 
                           xlab = "RAP component", font_size = 14)

table <- CARS::df_to_table(tables$rap_components, 
                           n = samples$code_at_work,
                           column_headers = c("RAP component",
                                              "Type",
                                              "Percentage of analysts who code in their work"))

CARS::wrap_outputs("rap-comp", plot, table)

```

The most commonly used practices were the use of open source software (`r paste0(round(tables$rap_components[1,3]*100,0), "%")`) and proportionate QA (`r paste0(round(tables$rap_components[2,3]*100,0), "%")`). Open sourcing code (`r paste0(round(tables$rap_components[6,3]*100,0), "%")`) and packaging code (`r paste0(round(tables$rap_components[13,3]*100,0), "%")`) were the practices least commonly applied.


### Consistency of good coding practices

We asked respondents who reported writing code at work how frequently they apply good coding practices when writing code at work.


```{r}

plot <- CARS::plot_likert(tables$coding_practices, 
                          n = samples$code_at_work,
                          mid = 5, neutral_mid = FALSE, 
                          break_q_names_col = "name",
                          max_lines = 2, font_size = 14, 
                          height = 800, width = "100%")

table <- CARS::df_to_table(tables$coding_practices, 
                           column_headers = c(
                             "Statement",
                             "I don't understand this question (%)",
                             "Never (%)", 
                             "Rarely (%)", 
                             "Sometimes (%)",
                             "Regularly (%)", 
                             "All the time (%)"
                             ),
                           n = samples$code_at_work,
                           crosstab = TRUE)

CARS::wrap_outputs("good-practices", plot, table)

```

The results show that while good coding practice is being used in analytical code, it is not applied consistently. For example `r paste0(round((tables$coding_practices[3,3] + tables$coding_practices[4,3])*100, 0), "%")` of respondents reported automating quality assurance only 'Sometimes' or 'Rarely'. Similarly, a quarter of respondents were unfamiliar with standard directory structures (`r paste0(round(tables$coding_practices[49,3]*100, 0), "%")`) and unit tests (`r paste0(round(tables$coding_practices[55,3]*100, 0), "%")`), suggesting that skills gaps or terminology barriers remain in some areas.

### Code documentation

We asked respondents who reported writing code at work how frequently they write different forms of documentation when programming in their current role.

[Embedded documentation](https://best-practice-and-impact.github.io/qa-of-code-guidance/code_documentation.html) is one of the components which make up the RAP minimum viable product. Documentation is important to help others be clear on how to use the product and what the code is intended to do.

```{r}

plot <- CARS::plot_likert(tables$doc, 
                          n = samples$code_at_work,
                          mid = 5, neutral_mid = FALSE, 
                          break_q_names_col = "name",
                          max_lines = 2, font_size = 14, 
                          height = 800, width = "100%")

table <- CARS::df_to_table(tables$doc, 
                           column_headers = c(
                             "Statement",
                             "I don't understand this question (%)",
                             "Never (%)", 
                             "Rarely (%)", 
                             "Sometimes (%)",
                             "Regularly (%)", 
                             "All the time (%)"
                             ),
                           n = samples$code_at_work,
                           crosstab = TRUE)

CARS::wrap_outputs("doc", plot, table)

```

In line with previous years, code comments remain the most common form of documentation, with `r paste0(round((tables$doc[11,3] + tables$doc[12,3])*100, 0), "%")` of respondents using them regularly or all of the time. All other forms of documentation were used much less consistently suggesting that documentation is not being prioritised in analytical work. This has implications for reproducibility and long term sustainability of projects.

### Summary

The RAP strategy has three [goals](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/#section-4): 

* to ensure analysts have the right tools to implement RAP principles
* to ensure analysts are supported to implement RAP principles
* to ensure there is a culture of RAP principles by default for analysis

The results from CARS 2023 indicate that public sector analysts are regularly using coding in their work and that open source tools are widely accessible. There is still progress to be made against the first goal however, particularly in ensuring Git is available to all public sector analysts. There also remains some discrepancy between availability and capability in different tools, meaning that even if open source tools are available they are not necessarily being used.

Over half of respondents agreed that they felt supported implemented RAP principles and that they knew where to find resources to help. The data suggests that coding capability is increasing on the whole, however there are still some areas in which it is negatively affected. This is likely due to lack of opportunity to maintain coding skills in role, as coding frequency is strongly positively correlated with increasing capability. To maintain and improve the coding skills of analysts, it is important to allow time for active development as well as providing training resources.

Although awareness of RAP appears to be increasing, there remains some inconsistency in the application of RAP principles. This suggests that coding best practice is not always applied by default. While this can be attributed to skills gaps in some instances, in others there may be specific project, role or departmental factors that mean RAP is being under-used. 